{"name":"RealCaptcha","tagline":"An Advanced PHP Captcha Generator","body":"A PHP Library that uses the [PHP-GD](http://php.net/manual/en/book.image.php) Extension to generate Captchas with only PHP.  \r\nRealCaptcha is released under the [MIT License](http://projects.dichrome.tk/realCaptcha/license.php). Visit the project [Homepage](http://projects.dichrome.tk/realCaptcha/) for more information.\r\n\r\n**Note:** This code is still in its Beta stage so it maybe prone to many bugs...\r\n\r\n![Example Image](http://projects.dichrome.tk/realCaptcha/images/example.jpg)\r\n\r\n\r\n\r\n\r\n##Features\r\n\r\n+ Custom Fonts\r\n+ Customizable Colors\r\n+ Supports 4 different captcha text sources\r\n\r\n    + __Input__<br>\r\n\r\n    + __Custom Generator Functions__<br> You can define a custom function of your own that generates the text that should be in the captcha.<br>\r\n\r\n    + __Random Text Generator__<br> Generates a random string of Letters and Numbers.<br>\r\n\r\n    + __Dictionary File__<br> Can use any file containing space separated words as a dictionary file to choose words from.\r\n\r\n+ Captcha Image Compression\r\n+ 3 different output formats ( **jpg**, **png**, **gif** )\r\n+ Output locations\r\n    + To Browser\r\n    + To File\r\n    + Return GD Resource Handle\r\n\r\n\r\n\r\nBasic Usage\r\n---------------------------\r\n###Basic\r\n\tinclude(\"captcha.class.php\");\r\n\t$captcha = new realCaptcha();\r\n\t$captcha->generate()->output(\"jpg\");\r\n\r\n\r\n###Configuring\r\nAll three of these code output similar Captchas to the browser in JPG Format.  \r\n\r\nWhile Initializing\r\n\r\n\t$realCaptcha = new realCaptcha(array(\r\n\t\t\"height\" = 200,\r\n\t\t\"width\" = 500,\r\n\t\t\"number_of_words\" = 2\r\n\t));\r\n\r\n\t$captcha = $realCaptcha->generate();\r\n\t$captcha->output(\"jpg\");\r\n\r\nThe Settings you provide at Initialzation will be used everytime the `generate()` method is called.  \r\n\r\nUsing the ***`set()`*** method\r\n\r\n\t$realCaptcha = new realCaptcha();\r\n\r\n\t$realCaptcha->set(array(\r\n\t\t\"height\" = 200,\r\n\t\t\"width\" = 500,\r\n\t\t\"number_of_words\" = 2\r\n\t));\r\n\r\n\t$captcha = $realCaptcha->generate();\r\n\t$captcha->output(\"jpg\");\r\n\r\nThe settings you define with the `set()` method will overwrite the settings you provided at initialization and will be used\r\nevery time the `generate()` method is called.  \r\n\r\nWhile Generating\r\n\r\n\r\n\t$realCaptcha = new realCaptcha();\r\n\r\n\t$captcha = $realCaptcha->generate(array(\r\n\t\t\"height\" = 200,\r\n\t\t\"width\" = 500,\r\n\t\t\"number_of_words\" = 2\r\n\t));\r\n\t$captcha->output(\"jpg\");\r\n\r\nThe `generate()` method will give high priority to the settings passed to it as an argument. These setting will be forgotten\r\nas soon as the captcha is finished generating.\r\n\r\n###Dealing with output\r\n\t$realCaptcha = new realCaptcha();\r\n\t$captcha = $realCaptcha->generate();\r\n\r\nThe `generate()` method returns an Output object it has two methods and a buch of Properties.\r\n\r\n####The Methods\r\n+ `file( path, format, quality)`: Writes Captcha to a file\r\n+ `output( format, quality)`: Sets appropriate image format headers and sends the Image data to browser\r\n\r\n####The Properties\r\n+ `text`: Contains a string words that are present in the captcha image, seperated by spaces\r\n+ `array`: Contains an Array of the words present in the captcha image.\r\n\r\n####Example\r\nThis example generates a captcha and stores the captcha text  in a session variable so that it can be \r\nmatched later and output the captcha image to browser and also daves the image to a file named `example.jpg`\r\n\r\n\tsession_start();\r\n\t$realCaptcha = new realCaptcha();\r\n\r\n\t$captcha = $realCaptcha->generate();\r\n\t$_SESSION[\"captcha_text\"] = $captcha->text;\r\n\t$captcha->output(\"jpg\",100);\r\n\t$captcha->file(\"example.jpg\",\"jpg\",100);\r\n\r\n\r\n###Saving Captcha to file\r\nTo save captcha to file, you can use the **`file( file_path, format, quality)`** method.\r\n\r\n\t$captcha = $realCaptcha->generate();\r\n\t$captcha->file(\"file.jpg\" ,\"jpg\", 90);\r\n\r\nFull List of settings\r\n--------------------------------\r\n+ **height** (a positive Integer) : Height of the generated Captcha Image.\r\n+ **width** (a positive integer) : Width of the generated Captcha Image.\r\n+ **source** (realCaptcha source type constant): Where to get the captcha text from.\r\n\t+ **`realCaptcha::INPUT`**: Requires you to pass the captcha text while calling `generate()` method\r\n\t+ **`realCaptcha::RANDOM`**: Generates a random string of letters and numbers.\r\n\t+ **`realCaptcha::DICTIONARY`**: Selects words at random from the dictionary file.\r\n\t+ **`realCaptcha::uFUNCTION`**: Requires you to set a custom made function that returns the captcha text.\r\n+ **dictionary_file** (a valid file path): Path to the dictionary File.\r\n+ **fonts_dir** (a valid directory path): Path to the dictory containing all the fonts.\r\n+ **number_of_words** (a positive integer): Number of words the captcha image should contain.\r\n+ **random_length** (a positive integer): the length of the randomly generated string.\r\n+ **background_color** (realCaptcha variable_grey setting constant or array)\r\n\t+ **`realCaptcha::GREY_VARIABLE`** : Randomly chooses a shade from white to light ash.\r\n\t+ **`array( int, int, int)`** : A numerical array containing RGB values.\r\n+ **text_color** (array): A numerical array containing RGB values.\r\n\r\n\r\nAdvanced Usage\r\n---------------------------\r\n###Setting Background and Text color\r\n\t$captcha = new realCaptcha(array(\r\n\t\t\"background_color\" => array(255,0,0), //Bright Red\r\n\t\t\"text_color\" => array(255,255,255) //White\r\n\t));\r\n\r\n\t$captcha->generate()->output(\"jpg\");\r\n\r\n###Using direct Input\r\nBoth these codes are correct but work in different ways and the settings persist \r\nfor different fractions of the run cycle.\r\n\r\nSetting at Initialization\r\n\r\n\t$captcha = new realCaptcha(array(\r\n\t\t\"source\" => realCaptcha::INPUT\r\n\t));\r\n\r\n\t$captcha->generate(\"Text\")->output(\"jpg\");\r\n\r\n\r\nSetting at Generator\r\n\r\n\t$captcha = new realCaptcha();\r\n\t$captcha->generate(\"Text\", array(\"source\" => realCaptcha::INPUT))->output(\"jpg\");\r\n\r\nIt is Completely ok to pass String or an Array as input into the generator method,\r\nthus both the following teo lines of code are valid\r\n\r\n\t$captcha->generate(\"Text\")->output(\"jpg\");\r\n\t$captcha->generate(array(\"example\",\"text\"))->output(\"jpg\");\r\n\r\n###Using Custom Text Generator Function\r\nUnlike __Direct Input__ , Custom Functions cannot be set and declared at the __generator__ method,\r\ncustom function usage has to be declared in the initialization settings or through the `set()` method\r\nand the function has to be define through the `textFunction()` method as the first argument. All prior to \r\ncalling the `generate()` method in which you intend to use the Custom function.\r\n\r\n####Example\r\n\t$captcha = new realCaptcha(array(\r\n\t\t\"source\" => realCaptcha::uFUNCTION\r\n\t));\r\n\r\n\t$captcha->textFunction(function(){\r\n\t\treturn array(\"returned\",\"text\");\r\n\t});\r\n\r\n\t$captcha->generate()->output(\"jpg\");\r\n\r\n\r\nLiscense\r\n---------\r\nRealCaptcha is released under the [MIT License](http://projects.dichrome.tk/realCaptcha/license.php). Visit the project [Homepage](http://projects.dichrome.tk/realCaptcha/) for more information.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}